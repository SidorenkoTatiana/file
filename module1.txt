### Модуль 1: Проектирование бизнес-приложения

#### 1. Бизнес-требования
Бизнес-приложение предназначено для автоматизации процессов локального офиса службы курьерской доставки. Оно должно обеспечивать:
- Управление посылками (приём, проверка, доставка, возврат).
- Формирование накладных для курьеров и экспедиторов.
- Отслеживание статусов посылок (например, «доставлено», «доставка не удалась»).
- Авторизацию пользователей с разграничением прав доступа (водитель-экспедитор, менеджер, курьер).

---

#### 2. Диаграмма вариантов использования (Use Case Diagram)
```plantuml
@startuml
left to right direction
actor "Водитель-экспедитор" as driver
actor "Менеджер" as manager
actor "Курьер" as courier

rectangle "Бизнес-приложение" {
  driver --> (Просмотр накладных на доставку)
  driver --> (Просмотр накладных на возврат)
  driver --> (Ввод данных о посылках)

  manager --> (Просмотр накладных на доставку)
  manager --> (Просмотр накладных на возврат)
  manager --> (Приём посылок в доставку)
  manager --> (Формирование перечня посылок)

  courier --> (Просмотр накладных на доставку)
  courier --> (Отметка попытки выдачи посылки)
}
@enduml
```

**Описание:**
- **Водитель-экспедитор** может просматривать накладные и вводить данные о доставленных посылках.
- **Менеджер** управляет посылками, формирует списки для доставки и проверяет их.
- **Курьер** просматривает накладные и отмечает статусы доставки.

---

#### 3. Диаграмма активности (Activity Diagram) для формирования списка посылок
```plantuml
@startuml
start
:Менеджер запускает формирование списка;
if (Время после 17:00?) then (Да)
  if (Есть посылки со статусом «доставлена в локальный офис»?) then (Нет)
    :Отобрать посылки по принципу FIFO;
    :Присвоить статус «подготовлено к доставке»;
    :Сформировать накладную;
  else (Да)
    :Отказать в формировании списка;
  endif
else (Нет)
  :Отказать в формировании списка;
endif
stop
@enduml
```

**Описание:**
Процесс формирования списка посылок менеджером возможен только после 17:00 и при отсутствии посылок со статусом «доставлена в локальный офис».

---

#### 4. Диаграмма активности (Activity Diagram) для попытки доставки курьером
```plantuml
@startuml
start
:Курьер выбирает посылку;
if (Посылка выдана адресату?) then (Да)
  :Присвоить статус «доставлено»;
else (Нет)
  if (Адресат недоступен?) then (Да)
    if (Первый раз статус «доставка не удалась»?) then (Да)
      :Присвоить статус «доставка не удалась»;
    else (Нет)
      :Обновить дату доставки на текущую;
    endif
  else (Нет)
    :Предложить адресату новую дату;
    :Обновить дату доставки;
    :Добавить в накладную на новую дату;
  endif
endif
stop
@enduml
```

**Описание:**
Курьер отмечает результат доставки, обновляя статус или дату в зависимости от ситуации.

---

#### 5. Диаграмма классов (Class Diagram)
```plantuml
@startuml
class User {
  +id: String
  +login: String
  +password: String
  +role: String
}

class Parcel {
  +id: String
  +trackNumber: String
  +sender: String
  +receiver: String
  +status: String
  +deliveryDate: Date
}

class Invoice {
  +id: String
  +date: Date
  +parcels: List<Parcel>
}

class Manager {
  +verifyParcels()
  +generateInvoice()
}

class Courier {
  +markDeliveryAttempt()
}

class Driver {
  +inputParcelData()
}

User <|-- Manager
User <|-- Courier
User <|-- Driver
Parcel "1" *-- "0..*" Invoice
@enduml
```

**Описание:**
- **User**: Базовый класс для всех пользователей.
- **Parcel**: Информация о посылке (отправитель, получатель, статус).
- **Invoice**: Накладная, содержащая список посылок.
- **Manager**, **Courier**, **Driver**: Классы с методами для соответствующих ролей.

---

#### Как это должно выглядеть в документации:
1. **Бизнес-требования**: Текстовое описание целей и функций приложения.
2. **Диаграммы**:
   - Use Case Diagram: Графическое представление взаимодействия пользователей с системой.
   - Activity Diagrams: Блок-схемы ключевых процессов (формирование списка, доставка).
   - Class Diagram: Схема классов с атрибутами и связями.
3. **Пояснения**: Краткое описание каждой диаграммы и её элементов.

Пример оформления:
```
### 2. Модель функциональных требований
#### Use Case Diagram
[Код PlantUML]
[Изображение диаграммы]

#### Activity Diagram для формирования списка
[Код PlantUML]
[Изображение диаграммы]

#### Class Diagram
[Код PlantUML]
[Изображение диаграммы]
``` 

Для визуализации диаграмм можно использовать инструменты PlantUML (например, https://www.plantuml.com/).
